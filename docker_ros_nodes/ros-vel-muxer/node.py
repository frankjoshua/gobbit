#!/usr/bin/env python
import rospy
import time
import argparse
from geometry_msgs.msg import Twist

class VelocityController:

    def __init__(self, computerTopic, manualTopic, outputTopic, manualControlTime):
        self.computerControl = rospy.Subscriber(computerTopic, Twist, self.computer, queue_size=1)
        self.manualControl = rospy.Subscriber(manualTopic, Twist, self.manual, queue_size=1)
        self.motorPub = rospy.Publisher(outputTopic, Twist, queue_size=1)
        self.manualTime = manualControlTime
        self.lastManual = time.time() - self.manualTime

    def manual(self, msg):
        #Send speed to motor
        self.motorPub.publish(msg)
        #Update time since last manual control
        self.lastManual = time.time()

    def computer(self, msg):
        #Check if it has been long enough since the last manual control
        if time.time() - self.lastManual > self.manualTime:
            self.motorPub.publish(msg)
        


def listener():
    rospy.init_node('velocity_muxer', anonymous=False)
    # construct the argument parse and parse the arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-c", "--computer_topic", required=True,
        help="Topic generated by automatic control")
    ap.add_argument("-m", "--manual_topic", required=True,
        help="Topic that will override computer control")
    ap.add_argument("-o", "--output_topic", required=True,
        help="Topic to redirect control to")
    ap.add_argument("-d", "--delay", required=True,
        help="Amount of time to keep manual control")    
    args = vars(ap.parse_args())

    VelocityController(
        args["computer_topic"],
        args["manual_topic"],
        args["output_topic"],
        int(float(args["delay"]))
    )
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

if __name__ == '__main__':
    listener()
