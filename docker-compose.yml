---
version: '3'
services:

  ros-master:
    image: "frankjoshua/ros-master:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-master
    volumes:
      - $HOME/ros:/root/.ros
    env_file:
      - ros.env
    network_mode: "host"

  ros-node-launcher:
    image: frankjoshua/ros-node-launcher
    build: ./docker_ros_nodes/ros-node-launcher
    env_file:
      - ros.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/gobbit/docker_ros_nodes/ros-node-launcher/node.py:/node.py
    network_mode: "host"
    command: python /node.py
    
  ros-irobot-create-2-controls:
    image: frankjoshua/ros-irobot-create-2-controls
    build: ./docker_ros_nodes/ros-irobot-create-2-controls
    env_file:
      - ros.env
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-irobot-create-2-controls/node.py:/node.py
    network_mode: "host"
    command: python /node.py

  # ros-dnn:
  #   image: frankjoshua/ros-dnn
  #   build: ./docker_ros_nodes/ros-dnn
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   command: roslaunch --wait dnn_detect dnn_detect.launch camera:=/usb_cam image:=image_raw

  # ros-dnn-tracker:
  #   image: frankjoshua/ros-dnn-tracker
  #   build: ./docker_ros_nodes/ros-dnn-tracker
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   command: python /node.py

  # ros-irobot-create-2:
  #   image: "frankjoshua/ros-irobot-create-2:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-irobot-create-2
  #   devices:
  #     - /dev/create2:/dev/ttyUSB0
  #   env_file:
  #     - ros.env
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-irobot-create-2/config.yaml:/config.yaml
  #     - $HOME/gobbit/docker_ros_nodes/ros-irobot-create-2/ros.launch:/ros.launch
  #   network_mode: "host"
    #command: "cat /dev/ttyUSB0"

  ros-hector-mapping:
    image: "frankjoshua/ros-hector-mapping:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-hector-mapping
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-hector-mapping/ros.launch:/ros.launch
    env_file:
      - ros.env
    network_mode: "host"

  ros-move-base:
    image: "frankjoshua/ros-move-base:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-move-base
    env_file:
      - ros.env
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-move-base/ros.launch:/ros.launch
      - $HOME/gobbit/docker_ros_nodes/ros-move-base/base_local_planner_params.yaml:/base_local_planner_params.yaml
      - $HOME/gobbit/docker_ros_nodes/ros-move-base/costmap_common_params.yaml:/costmap_common_params.yaml
      - $HOME/gobbit/docker_ros_nodes/ros-move-base/global_costmap_params.yaml:/global_costmap_params.yaml
      - $HOME/gobbit/docker_ros_nodes/ros-move-base/local_costmap_params.yaml:/local_costmap_params.yaml
    network_mode: "host"

  ros-vel-muxer:
    image: "frankjoshua/ros-vel-muxer:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-vel-muxer
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-vel-muxer/node.py:/node.py
    env_file:
      - ros.env
    network_mode: "host"
    command: python /node.py --computer_topic /cmd_vel/computer --manual_topic /pocketbot/cmd_vel --output_topic /cmd_vel --delay 5 -x 0.4 -z 0.4

  # ros-gmapping:
  #   image: frankjoshua/ros-gmapping
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/gmapping/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"

  # ros-ydlidar-x4:
  #   image: "frankjoshua/ros-ydlidar-x4:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-ydlidar-x4
  #   devices:
  #     - /dev/ydlidar:/dev/ydlidar
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   command: python /node.py --computer_topic /cmd_vel/computer --manual_topic /pocketbot/cmd_vel --output_topic /cmd_vel --delay 5 -x 0.2 -z 0.2
