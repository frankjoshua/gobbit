version: '3'
services:

############################ ALL ############################

  ros-master:
    image: "frankjoshua/ros-master:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-master
    volumes:
      - $HOME/ros:/root/.ros
    env_file:
      - ros.env
    network_mode: "host"

  # web-server-rpi:
  #   image: schoeffm/rpi-nginx-php5
  #   ports:
  #     - "88:80"
  #   volumes:
  #     - $HOME/gobbit/blockly:/usr/share/nginx/www

  # web-server:
  #   image: nginx
  #   ports:
  #     - "88:80"
  #   volumes:
  #     - $HOME/gobbit/blockly:/usr/share/nginx/html

  # ros-rosbridge-server:
  #   image: frankjoshua/ros-rpi-rosbridge-server
  #   ports:
  #     - "9090:9090"
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

#  ros-web-video-server:
#    image: frankjoshua/ros-rpi-web-video-server
#    env_file:
#      - ros.env
#    network_mode: "host"
#    restart: unless-stopped

  # ros-gobbit-description:
  #   image: "frankjoshua/ros-gobbit-description:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-gobbit-description
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - $HOME/gobbit/docker_ros_nodes/ros-gobbit-description/model.urdf.xacro:/model.urdf.xacro
  #     - $HOME/gobbit/docker_ros_nodes/ros-gobbit-description/description.launch:/description.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
  
  # ros-efim-description:
  #   image: "frankjoshua/ros-efim-description:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-efim-description
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - $HOME/gobbit/docker_ros_nodes/ros-efim-description/model.urdf.xacro:/model.urdf.xacro
  #     - $HOME/gobbit/docker_ros_nodes/ros-efim-description/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  ros-mars-rover-description:
    image: "frankjoshua/ros-mars-rover-description:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-mars-rover-description
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $HOME/gobbit/docker_ros_nodes/ros-mars-rover-description/model.urdf.xacro:/model.urdf.xacro
      - $HOME/gobbit/docker_ros_nodes/ros-mars-rover-description/ros.launch:/ros.launch
    env_file:
      - ros.env
    network_mode: "host"
    restart: unless-stopped
    
  # ros-diff-drive:
  #   image: "frankjoshua/ros-diff-drive:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-diff-drive
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-diff-drive/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-gps-nav:
  #   image: "frankjoshua/ros-gps-nav-node:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-gps-nav-node
  #   env_file:
  #     - ros.env
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-gps-nav-node/node.py:/node.py
  #   network_mode: "host"
  #   restart: unless-stopped



############################ MAPPING ############################

  # ros-map-server:
  #   image: "frankjoshua/ros-map-server:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-map-server
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-map-server/map.yaml:/map.yaml
  #     - $HOME/gobbit/docker_ros_nodes/ros-map-server/map.2048.pgm:/map.2048.pgm
  #     - $HOME/gobbit/docker_ros_nodes/ros-map-server/map.512.png:/map.512.png
  #     - $HOME/gobbit/docker_ros_nodes/ros-map-server/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-gmapping:
  #   image: frankjoshua/ros-gmapping
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/gmapping/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
  
  # ros-hector-mapping:
  #   image: "frankjoshua/ros-hector-mapping:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-hector-mapping
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-hector-mapping/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
  
  # ros-rtab-map:
  #   image: "frankjoshua/ros-rtab-map:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-rtab-map
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-rtab-map/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
    
  # ros-cartographer:
  #   image: "frankjoshua/ros-cartographer:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-cartographer
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-cartographer/ros.launch:/ros.launch
  #     - $HOME/gobbit/docker_ros_nodes/ros-cartographer/settings.lua:/settings.lua
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-robot-localization:
  #   image: frankjoshua/ros-robot-localization
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/robot_localization/ros.launch:/ros.launch
  #     - $HOME/gobbit/docker_ros_nodes/robot_localization/params.yaml:/params.yaml
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-move-base:
  #   image: "frankjoshua/ros-move-base:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-move-base
  #   env_file:
  #     - ros.env
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-move-base/ros.launch:/ros.launch
  #     - $HOME/gobbit/docker_ros_nodes/ros-move-base/base_local_planner_params.yaml:/base_local_planner_params.yaml
  #     - $HOME/gobbit/docker_ros_nodes/ros-move-base/costmap_common_params.yaml:/costmap_common_params.yaml
  #     - $HOME/gobbit/docker_ros_nodes/ros-move-base/global_costmap_params.yaml:/global_costmap_params.yaml
  #     - $HOME/gobbit/docker_ros_nodes/ros-move-base/local_costmap_params.yaml:/local_costmap_params.yaml
  #   network_mode: "host"
  #   restart: unless-stopped

############################ LINE FOLLOWER ############################

  # ros-line-follower:
  #   image: frankjoshua/ros-rpi-line-follower
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
    
  # ros-opencv-line:
  #   image: "frankjoshua/ros-opencv-line:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-opencv-line
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-opencv-line/node.py:/node.py
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

########################### Object Detection ############################

  # ros-dnn:
  #   image: frankjoshua/ros-dnn
  #   build: ./docker_ros_nodes/ros-dnn
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   command: roslaunch --wait dnn_detect dnn_detect.launch camera:=/usb_cam image:=image_raw

########################### Alvar Tag Tracking ############################

  # ros-alvar-track:
  #   image: frankjoshua/ros-alvar-track
  #   build: ./docker_ros_nodes/ros-alvar-track
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-alvar-track/bundle.launch:/bundle.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"

  # ros-gzweb-8:
  #   image: frankjoshua/ros-gzweb-8
  #   build: ./docker_ros_nodes/ros-gzweb-8
  #   env_file:
  #     - ros.env
  #   network_mode: "host"

  # ros-gzweb-7:
  #   image: frankjoshua/ros-gzweb-7
  #   build: ./docker_ros_nodes/ros-gzweb-7
  #   env_file:
  #     - ros.env
  #   network_mode: "host"

  # ros-gzweb-9:
  #   image: frankjoshua/ros-gzweb-9
  #   build: ./docker_ros_nodes/ros-gzweb-9
  #   env_file:
  #     - ros.env
  #   network_mode: "host"

################## DISABLED #####################
  # ros-user-code:
  #   image: frankjoshua/ros-rpi-user-code-node
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: always
  #   volumes:
  #     - /home/pirate/gobbit/blockly/combined_code.py:/usr/share/nginx/www

  # ui:
  #   image: portainer/portainer:arm
  #   restart: unless-stopped
  #   volumes:
  #     - '/var/run/docker.sock:/var/run/docker.sock'
  #   expose:
  #     - 9000
  #   ports:
  #     - 9000:9000

version: '3'
services:
    
############################ LINE FOLLOWER ############################

  # ros-rpi-cam-v1:
  #   image: frankjoshua/ros-rpi-cam-v1
  #   build: ./docker_ros_nodes/ros-rpi-cam-v1
  #   devices:
  #     - "/dev/video0:/dev/video0"
  #   privileged: true
  #   volumes:
  #     - $HOME/gobbit/docker_ros_nodes/ros-rpi-cam-v1/ros.launch:/ros.launch
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  ros-motor-hat:
    image: frankjoshua/ros-adafruit-motor-hat
    build: ./docker_ros_nodes/ros-adafruit-motor-hat
    cap_add:
      - SYS_RAWIO
    devices:
      - "/dev/i2c-0:/dev/i2c-0"
      - "/dev/i2c-1:/dev/i2c-1"
      - "/lib/modules:/lib/modules"
      - "/dev/mem:/dev/mem"
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-adafruit-motor-hat/node.py:/node.py
    privileged: true
    env_file:
      - ros.env
    network_mode: "host"
    
############################ EFIM ############################

  # ros-arduino-serial:
  #   image: "frankjoshua/ros-arduino-serial:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros_arduino_serial
  #   env_file:
  #     - ros.env
  #   privileged: true
  #   network_mode: "host"
  #   volumes:
  #     - /dev/ttyACM2:/dev/arduino_motor
  #     - /home/nvidia/ros:/root/.ros
  #   restart: unless-stopped

  # ros-hokuyo-laser:
  #   image: "frankjoshua/ros-hokuyo-laser:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-hokuyo-laser
  #   devices:
  #     - "/dev/ttyACM0:/dev/hokuyo"
  #   volumes:
  #     - "$HOME/gobbit/docker_ros_nodes/ros-hokuyo-laser/ros.launch:/ros.launch"
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
    
  # ros-kinect:
  #   image: "frankjoshua/ros-kinect:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/ros-kinect
  #   privileged: true
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

############################ OTHER ############################

  ros-usb-cam:
    image: frankjoshua/ros-usb-cam
    build: ./docker_ros_nodes/ros-usb-cam
    devices:
      - "/dev/video0:/dev/video0"
    env_file:
      - ros.env
    network_mode: "host"
    #command: rosrun uvc_camera uvc_camera_node _width:=160 _height:=120 _fps:=30
    command: rosrun usb_cam usb_cam_node _width:=640 _height:=480 _fps:=30 _camera_frame_id:=camera_ceiling _camera_info_url:=file:///calibration.yaml _pixel_format:=yuyv
  
  # ros-xv-11-laser:
  #   image: "frankjoshua/docker_ros_xv_11:${ARCH:-latest}"
  #   build: ./docker_ros_nodes/docker_ros_xv_11
  #   devices:
  #     - "/dev/ttyACM0:/dev/laser_port"
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-ultimate-hat-node:
  #   image: frankjoshua/ros-rpi-ultimate-hat-node
  #   cap_add:
  #     - SYS_RAWIO
  #   devices:
  #     - "/dev/mem:/dev/mem"
  #     - "/lib/modules:/lib/modules"
  #     - "/dev/i2c-1:/dev/i2c-1"
  #   volumes:
  #     - "$HOME/gobbit/ultimate_hat_node/node.py:/node.py"
  #   privileged: true
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-linedog:
  #   image: frankjoshua/ros-rpi-linedog-node
  #   cap_add:
  #     - SYS_RAWIO
  #   devices:
  #     - "/dev/mem:/dev/mem"
  #     - "/lib/modules:/lib/modules"
  #     - "/dev/i2c-1:/dev/i2c-1"
  #   volumes:
  #     - "/home/pirate/gobbit/linedog_node/node.py:/node.py"
  #   privileged: true
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped

  # ros-oled-display:
  #   image: frankjoshua/ros-rpi-oled-display
  #   cap_add:
  #     - SYS_RAWIO
  #   devices:
  #     - "/dev/mem:/dev/mem"
  #     - "/lib/modules:/lib/modules"
  #     - "/dev/i2c-1:/dev/i2c-1"
  #   privileged: true
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   restart: unless-stopped
