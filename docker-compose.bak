---
version: '3'
services:

  ros-master:
    image: "frankjoshua/ros-master:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-master
    volumes:
      - $HOME/ros:/root/.ros
    env_file:
      - ros.env
    network_mode: "host"

  ros-mars-rover-description:
    image: "frankjoshua/ros-mars-rover-description:${ARCH:-latest}"
    build: ./docker_ros_nodes/ros-mars-rover-description
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $HOME/gobbit/docker_ros_nodes/ros-mars-rover-description/model.urdf.xacro:/model.urdf.xacro
      - $HOME/gobbit/docker_ros_nodes/ros-mars-rover-description/ros.launch:/ros.launch
    env_file:
      - ros.env
    network_mode: "host"
    restart: unless-stopped

  ros-rpi-cam-v1:
    image: frankjoshua/ros-rpi-cam-v1
    build: ./docker_ros_nodes/ros-rpi-cam-v1
    devices:
      - "/dev/video0:/dev/video0"
    privileged: true
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-rpi-cam-v1/ros.launch:/ros.launch
    env_file:
      - ros.env
    network_mode: "host"
    restart: unless-stopped

  ros-motor-hat:
    image: frankjoshua/ros-adafruit-motor-hat
    build: ./docker_ros_nodes/ros-adafruit-motor-hat
    cap_add:
      - SYS_RAWIO
    devices:
      - "/dev/i2c-0:/dev/i2c-0"
      - "/dev/i2c-1:/dev/i2c-1"
      - "/lib/modules:/lib/modules"
      - "/dev/mem:/dev/mem"
    volumes:
      - $HOME/gobbit/docker_ros_nodes/ros-adafruit-motor-hat/node.py:/node.py
    privileged: true
    env_file:
      - ros.env
    network_mode: "host"
    
  ros-usb-cam:
    image: frankjoshua/ros-usb-cam
    build: ./docker_ros_nodes/ros-usb-cam
    devices:
      - "/dev/video0:/dev/video0"
    env_file:
      - ros.env
    network_mode: "host"
    #command: rosrun uvc_camera uvc_camera_node _width:=640 _height:=480 _fps:=30
    command: rosrun usb_cam usb_cam_node _width:=640 _height:=480 _fps:=30 _camera_frame_id:=camera_ceiling _camera_info_url:=file:///calibration.yaml _pixel_format:=yuyv
    
  # ros-dnn:
  #   image: frankjoshua/ros-dnn
  #   build: ./docker_ros_nodes/ros-dnn
  #   env_file:
  #     - ros.env
  #   network_mode: "host"
  #   #command: roslaunch --wait dnn_detect dnn_detect.launch camera:=/raspicam_node image:=image
  #   command: roslaunch --wait dnn_detect dnn_detect.launch camera:=/usb_cam image:=image_raw